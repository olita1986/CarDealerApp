//
//  ManufacturerViewController.swift
//  CarDealerApp
//
//  Created by Nisum on 11/16/19.
//  Copyright (c) 2019 Orlando Arzola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ManufacturerDisplayLogic: class {
    func displayLoading()
    func dismissLoading()
    func displayView(viewModel: Manufacturer.Manufacturer.ViewModel)
    func displayModels()
}

class ManufacturerViewController: CommonListViewController, ManufacturerDisplayLogic {
    var interactor: ManufacturerBusinessLogic?
    var router: (NSObjectProtocol & ManufacturerRoutingLogic & ManufacturerDataPassing)?

    var manufacturers:[ManufacturerModel] = []

    // MARK: Object lifecycle

    override init() {
        super.init()
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ManufacturerInteractor()
        let presenter = ManufacturerPresenter()
        let router = ManufacturerRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        setupViews()
        interactor?.getManufacturers()
    }

    private func setupViews() {
        title = CarDealerConstants.ViewTitle.manufacturerViewTitle
        dataTableView.prefetchDataSource = self
        dataTableView.delegate = self
    }

    // MARK: - VIP methods

    func displayLoading() {
        title = CarDealerConstants.ViewTitle.loadingViewTitle
    }

    func dismissLoading() {
        title = CarDealerConstants.ViewTitle.manufacturerViewTitle
    }

    func displayView(viewModel: Manufacturer.Manufacturer.ViewModel) {
        manufacturers += viewModel.manufacturers
        loadingRowCount = viewModel.loadingRowCount
        carModels += viewModel.manufacturers.map{ $0.name }
        guard let indexPaths = viewModel.indexPathsToReload else {
            return
        }
        let indexPathToReload = visibleIndexPathsToReload(intersecting: indexPaths)
        dataTableView.reloadRows(at: indexPathToReload, with: .automatic)
    }

    func displayModels() {
        router?.routeToModelViewController()
    }
}

extension ManufacturerViewController: UITableViewDataSourcePrefetching, UITableViewDelegate {
    func tableView(_ tableView: UITableView, prefetchRowsAt indexPaths: [IndexPath]) {
        if indexPaths.contains(where: isLoadingCell) {
            interactor?.getManufacturers()
        }
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let manufacturer = manufacturers[indexPath.row]
        let request = Manufacturer.Models.Request(manufacturer: manufacturer)
        interactor?.getModels(request: request)
    }
}
