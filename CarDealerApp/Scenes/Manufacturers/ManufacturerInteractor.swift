//
//  ManufacturerInteractor.swift
//  CarDealerApp
//
//  Created by Nisum on 11/16/19.
//  Copyright (c) 2019 Orlando Arzola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ManufacturerBusinessLogic {
    func getManufacturers()
    func getModels(request: Manufacturer.Models.Request)
}

protocol ManufacturerDataStore {
    var modelsResponse: CarDealerResponse? { get set }
    var manufacturer: String { get set }
}

class ManufacturerInteractor: CommonInteractor, ManufacturerBusinessLogic, ManufacturerDataStore {
    var presenter: ManufacturerPresentationLogic?
    var worker = ManufacturerWorker()

    var modelsResponse: CarDealerResponse?
    var manufacturer: String = ""

    private var rawManufacturers: [String: String] = [:]

    func getManufacturers() {
        if totalPageCount > 0 {
            if currentPage > totalPageCount - 1 {
                return
            }
        }
        guard !isLoadingManufacters else {
            return
        }
        isLoadingManufacters = true
        worker.getManufacturers(
            withPage: String(currentPage),
            onSuccess: { [unowned self] response in
                self.rawManufacturers = response.wkda
                self.currentPage += 1
                self.isLoadingManufacters = false
                self.totalPageCount = response.totalPageCount
                self.currentManufacturersCount += response.wkda.count
                if response.page > 0 {
                    let indexPathsToReload = self.calculateIndexPathsToReload(
                        from: response.wkda.count
                    )
                    let response = Manufacturer.Manufacturer.Response(
                        carDealerResponse: response,
                        indexPathsToReload: indexPathsToReload,
                        addLoadingRow: response.page < response.totalPageCount - 1
                    )
                    self.presenter?.presentView(response: response)
                } else {
                    let response = Manufacturer.Manufacturer.Response(
                        carDealerResponse: response,
                        indexPathsToReload: [],
                        addLoadingRow: true
                    )
                    self.presenter?.presentView(response: response)
                }
            },
            onError:  {[unowned self] error in
                self.isLoadingManufacters = false
                switch error {
                case .generalError:
                    print("Something went wrong")
                case .noCars:
                    print("There are no manufacturers")
                }
            })
    }

    func getModels(request: Manufacturer.Models.Request) {
        manufacturer = request.manufacturer.name
        presenter?.presentLoading()
        worker.getModels(
            withPage: "0",
            manufacturerId: request.manufacturer.id,
            onSuccess: { [unowned self] response in
                self.presenter?.dismissLoading()
                self.modelsResponse = response
                self.presenter?.presentModels()
            },
            onError:  { (error) in
                self.presenter?.dismissLoading()
                self.isLoadingManufacters = false
                switch error {
                case .generalError:
                    print("Something went wrong")
                case .noCars:
                    print("There are no manufacturers")
                }
            }
        )
    }
}
