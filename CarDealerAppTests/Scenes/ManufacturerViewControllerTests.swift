//
//  ManufacturerViewControllerTests.swift
//  CarDealerApp
//
//  Created by Nisum on 11/16/19.
//  Copyright (c) 2019 Orlando Arzola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CarDealerApp
import XCTest

class ManufacturerViewControllerTests: XCTestCase {
    // MARK: Subject under test
    var sut: ManufacturerViewController!
    var window: UIWindow!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupManufacturerViewController()
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: Test setup
    
    func setupManufacturerViewController() {
        sut = ManufacturerViewController()
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Tests

    func testGetManufacturerWhenViewDidLoad() {
        // Given
        let interactorSpy = ManufacturerBusinessLogicSpy()
        sut.interactor = interactorSpy

        loadView()

        // Then
        XCTAssertTrue(interactorSpy.getManufacturersCalled)
    }

    func testDisplayView() {
        // Given
        let interactorSpy = ManufacturerBusinessLogicSpy()
        let tableViewSpy = DataTableViewSpy()
        sut.interactor = interactorSpy
        sut.dataTableView = tableViewSpy

        // When
        let viewModel = Manufacturer.Manufacturer.ViewModel(manufacturers: [ManufacturerModel(id: "012", name: "Ford")], indexPathsToReload: nil, loadingRowCount: 0)
        sut.displayView(viewModel: viewModel)

        // Then
        XCTAssertTrue(tableViewSpy.reloadDataCalled)
        XCTAssertFalse(tableViewSpy.reloadRowsCalled)
    }

    func testDisplayViewReloadRows() {
        // Given
        let interactorSpy = ManufacturerBusinessLogicSpy()
        let tableViewSpy = DataTableViewSpy()
        sut.interactor = interactorSpy
        sut.dataTableView = tableViewSpy

        // When
        let viewModel = Manufacturer.Manufacturer.ViewModel(manufacturers: [ManufacturerModel(id: "012", name: "Ford")], indexPathsToReload: [IndexPath(row: 0, section: 0)], loadingRowCount: 0)
        sut.displayView(viewModel: viewModel)

        // Then
        XCTAssertTrue(tableViewSpy.reloadDataCalled)
        XCTAssertTrue(tableViewSpy.reloadRowsCalled)

    }

    func testDidSelectRow() {
        // Given
        let interactorSpy = ManufacturerBusinessLogicSpy()
        sut.interactor = interactorSpy
        loadView()
        let viewModel = Manufacturer.Manufacturer.ViewModel(manufacturers: [ManufacturerModel(id: "012", name: "Ford")], indexPathsToReload: [IndexPath(row: 0, section: 0)], loadingRowCount: 0)
        sut.displayView(viewModel: viewModel)

        // When
        sut.tableView(sut.dataTableView, didSelectRowAt: IndexPath(row: 0, section: 0))

        // Then
        XCTAssertTrue(interactorSpy.getModelsCalled)
    }

    func testDidScroll() {
        // Given
        let interactorSpy = ManufacturerBusinessLogicSpy()
        sut.interactor = interactorSpy
        loadView()
        let viewModel = Manufacturer.Manufacturer.ViewModel(manufacturers: [ManufacturerModel(id: "012", name: "Ford")], indexPathsToReload: [IndexPath(row: 0, section: 0)], loadingRowCount: 0)
        sut.displayView(viewModel: viewModel)

        // When
        sut.tableView(sut.dataTableView, prefetchRowsAt: [IndexPath(row: 0, section: 0)])

        // Then
        XCTAssertTrue(interactorSpy.getManufacturersCalled)
    }

    func testDisplayLoading() {
        // When
        sut.displayLoading()

        // Then
        XCTAssertEqual(sut.title, CarDealerConstants.ViewTitle.loadingViewTitle)
    }

    func testDismissLoading() {
        // When
        sut.dismissLoading()

        // Then
        XCTAssertEqual(sut.title, CarDealerConstants.ViewTitle.manufacturerViewTitle)
    }

    func testDisplayModels() {
        // Given
        let routerSpy = ManufacturerRoutingLogicSpy()
        sut.router = routerSpy

        // When
        sut.displayModels()

        // Then
        XCTAssertTrue(routerSpy.routeToModelViewControllerCalled)
    }

    // Mock Table View

    class DataTableViewSpy: UITableView {
        var reloadDataCalled = false
        var reloadRowsCalled = false

        override func reloadData() {
            reloadDataCalled = true
        }

        override func reloadRows(at indexPaths: [IndexPath], with animation: UITableView.RowAnimation) {
            reloadRowsCalled = true
        }
    }
}
