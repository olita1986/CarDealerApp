//
//  ManufacturerPresenterTests.swift
//  CarDealerApp
//
//  Created by Nisum on 11/16/19.
//  Copyright (c) 2019 Orlando Arzola. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import CarDealerApp
import XCTest

class ManufacturerPresenterTests: XCTestCase {
    // MARK: Subject under test

    var sut: ManufacturerPresenter!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupManufacturerPresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupManufacturerPresenter() {
        sut = ManufacturerPresenter()
    }

    

    // MARK: Tests

    func testPresentLoading() {
        // Given
        let viewSpy = ManufacturerDisplayLogicSpy()
        sut.viewController = viewSpy

        // When
        sut.presentLoading()

        // Then
        XCTAssertTrue(viewSpy.displayLoadingCalled)
    }

    func testDismissLoading() {
        // Given
        let viewSpy = ManufacturerDisplayLogicSpy()
        sut.viewController = viewSpy

        // When
        sut.dismissLoading()

        // Then
        XCTAssertTrue(viewSpy.dismissLoadingCalled)
    }

    func presentView() {
        // Given
        let viewSpy = ManufacturerDisplayLogicSpy()
        sut.viewController = viewSpy

        // When
        let response = Manufacturer.Manufacturer.Response(
            carDealerResponse: CarDealerResponse(
                page: 0,
                pageSize: 15,
                totalPageCount: 6,
                wkda: ["012": "Audi"]
            ),
            indexPathsToReload: [],
            addLoadingRow: true
        )
        sut.presentView(response: response)

        // Then
        XCTAssertTrue(viewSpy.displayViewCalled)
    }

    func testPresentModels() {
        // Given
        let viewSpy = ManufacturerDisplayLogicSpy()
        sut.viewController = viewSpy

        // When
        sut.presentModels()

        // Then
        XCTAssertTrue(viewSpy.displayModelsCalled)
    }

}
